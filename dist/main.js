/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const url = \"https://api.openweathermap.org/data/2.5/weather\";\r\nconst query = \"?q=\";\r\nconst apiKey = \"&appid=a00db28d8e53d88347d89ca3380e675c\";\r\nconst farenheit = \"&units=imperial\";\r\nconst celcius = \"&units=metric\";\r\nconst giphyURL = \"https://api.giphy.com/v1/gifs/translate\";\r\nconst giphyKey = \"uzSAdRQ8bhTaN2osrUOtv1SEg8msOWrN\";\r\nlet units = [];\r\n\r\nlet savedArr = [];\r\nlet submitBtn = document.getElementById(\"submitSearch\");\r\nlet input = document.getElementById(\"form\");\r\nlet inputForDegree = \"\";\r\nlet F = document.getElementById(\"F\");\r\nlet C = document.getElementById(\"C\");\r\n\r\n//Used for disabling/enabling the save button in the main card\r\nlet i = 0;\r\n\r\nsubmitBtn.addEventListener(\"click\", (event) => {\r\n  //reassigns default value for units each time the form is submitted.\r\n  units = [farenheit, \"F\"];\r\n  inputForDegree = input.value;\r\n  onSubmit(input.value);\r\n  input.value = \"\";\r\n  i = 0;\r\n  C.disabled = false;\r\n  F.disabled = true;\r\n});\r\n\r\n//Changes the units to celcius and refetches and recreates all cards.\r\nC.addEventListener(\"click\", (event) => {\r\n  units = [celcius, \"C\"];\r\n  onSubmit(inputForDegree);\r\n  savedArr.forEach((element) => {\r\n    refetchSaved(element.city, units, element.id);\r\n  });\r\n  F.disabled = false;\r\n  C.disabled = true;\r\n});\r\n\r\n//Changes the units to farenheit and refetches and recreates all cards.\r\nF.addEventListener(\"click\", (event) => {\r\n  units = [farenheit, \"F\"];\r\n  onSubmit(inputForDegree);\r\n  savedArr.forEach((element) => {\r\n    refetchSaved(element.city, units, element.id);\r\n  });\r\n  F.disabled = true;\r\n  C.disabled = false;\r\n});\r\n\r\nfunction onSubmit(input) {\r\n  let startTime = Date.now();\r\n\r\n  fetch(`${url}${query}${input}${apiKey}${units[0]}`, { mode: \"cors\" })\r\n    .then((result) => result.json())\r\n    .then((body) => {\r\n      weatherData(body);\r\n      loadCalc(startTime);\r\n    })\r\n    .catch((err) => {\r\n      console.error(err.message);\r\n      window.alert(\"Invalid city, please try again.\");\r\n    });\r\n}\r\n\r\nfunction weatherData(body) {\r\n  let city = body.name;\r\n  let temp = body.main.temp.toFixed(0);\r\n  let weatherIcon = body.weather[0].icon;\r\n  let weatherDesc = body.weather[0].description;\r\n  let time = new Date().toLocaleTimeString();\r\n\r\n  let newCity = new Location(city, temp, weatherIcon, weatherDesc, time);\r\n\r\n  newCity.creation();\r\n}\r\n\r\n//Class for making the main card on the page from where you can save to the saved area.\r\nclass Location {\r\n  constructor(city, temp, weatherIcon, weatherDesc, time) {\r\n    this.city = city;\r\n    this.temp = temp;\r\n    this.weatherIcon = weatherIcon;\r\n    this.weatherDesc = weatherDesc;\r\n    this.time = time;\r\n  }\r\n\r\n  //Creates the needed elements, assigns them values and appends them.\r\n  creation() {\r\n    let tempcolor = \"\";\r\n    if (this.temp <= 32) {\r\n      tempcolor = \"border-info\";\r\n    } else if (this.temp <= 50) {\r\n      tempcolor = \"border-primary\";\r\n    } else if (this.temp <= 70) {\r\n      tempcolor = \"border-success\";\r\n    } else if (this.temp <= 80) {\r\n      tempcolor = \"border-warning\";\r\n    } else {\r\n      tempcolor = \"border-danger\";\r\n    }\r\n\r\n    let main = document.getElementById(\"mainCard\");\r\n    main.innerHTML = \"\";\r\n    let card = document.createElement(\"div\");\r\n    card.classList.add(\"card\", tempcolor);\r\n    let header = document.createElement(\"div\");\r\n    header.classList.add(\"card-header\", tempcolor);\r\n    let footer = document.createElement(\"div\");\r\n    footer.classList.add(\"card-footer\", tempcolor);\r\n\r\n    let h3 = document.createElement(\"h3\");\r\n    let h2 = document.createElement(\"h2\");\r\n    let h5 = document.createElement(\"h5\");\r\n\r\n    let tempBody = document.createElement(\"div\");\r\n    tempBody.classList.add(\"card-body\");\r\n    let weatherBody = document.createElement(\"div\");\r\n    weatherBody.classList.add(\"card-body\");\r\n    let gifBody = document.createElement(\"div\");\r\n    gifBody.classList.add(\"gif\", \"card-body\");\r\n\r\n    let icon = document.createElement(\"img\");\r\n    let gif = document.createElement(\"img\");\r\n    gif.setAttribute(\"style\", \"width: 100%; height: 100%\");\r\n\r\n    //Fetch the gif from Giphy\r\n    fetch(`${giphyURL}?api_key=${giphyKey}&s=weather+${this.weatherDesc}`, {\r\n      mode: \"cors\",\r\n    })\r\n      .then((result) => result.json())\r\n      .then((response) => {\r\n        gif.src = response.data.images.original.url;\r\n      })\r\n      .catch((err) => {\r\n        gif.src = \"#\";\r\n        console.error(err.message);\r\n      });\r\n\r\n    let row = document.createElement(\"div\");\r\n    row.classList.add(\"row\");\r\n    let saveCol = document.createElement(\"div\");\r\n    saveCol.classList.add(\"col\", \"m-auto\");\r\n    let updateCol = document.createElement(\"div\");\r\n    updateCol.classList.add(\"col\", \"m-auto\");\r\n\r\n    //Creates the save button that gets disabled if the location was updated vs. submitted.\r\n    let saveBtn = document.createElement(\"button\");\r\n    saveBtn.classList.add(\"btn\", \"btn-outline-secondary\");\r\n    saveBtn.setAttribute(\"id\", \"saveBtn\");\r\n    saveBtn.innerHTML = \"&#10084; Save\";\r\n    if (i == 1) {\r\n      saveBtn.disabled = true;\r\n    } else {\r\n      saveBtn.disabled = false;\r\n    }\r\n\r\n    //Creates a new SavedLocation object, pushes it to the saved array and disables the button.\r\n    saveBtn.addEventListener(\"click\", (event) => {\r\n      let container = document.getElementById(\"savedCards\");\r\n      container.innerHTML = \"\";\r\n      let saved = new SavedLocation(\r\n        savedArr.length,\r\n        this.city,\r\n        this.temp,\r\n        this.weatherIcon,\r\n        this.weatherDesc,\r\n        gif.src,\r\n        this.time\r\n      );\r\n      savedArr.push(saved);\r\n      savedArr.forEach((element) => {\r\n        element.savedCreation();\r\n      });\r\n      saveBtn.disabled = true;\r\n      i++;\r\n    });\r\n\r\n    //Creates a button with an event listener that refetches all the data and recreates the main card.\r\n    let updateBtn = document.createElement(\"button\");\r\n    updateBtn.classList.add(\"btn\", \"btn-outline-secondary\");\r\n    updateBtn.setAttribute(\"id\", \"updateBtn\");\r\n    updateBtn.innerHTML = \"&#10227; Update\";\r\n    updateBtn.addEventListener(\"click\", (event) => {\r\n      onSubmit(this.city);\r\n    });\r\n\r\n    let label = document.createElement(\"label\");\r\n    label.setAttribute(\"for\", \"updateBtn\");\r\n    label.textContent = \"Last Updated: \" + this.time;\r\n\r\n    //Append elements\r\n    h3.textContent = this.city;\r\n    header.appendChild(h3);\r\n    h2.textContent = this.temp + \"\\u00B0\" + units[1];\r\n    tempBody.appendChild(h2);\r\n    h5.textContent = this.weatherDesc;\r\n    icon.src = `http://openweathermap.org/img/wn/${this.weatherIcon}@2x.png`;\r\n    weatherBody.append(icon, h5);\r\n    gifBody.appendChild(gif);\r\n    saveCol.appendChild(saveBtn);\r\n    updateCol.append(label, updateBtn);\r\n    row.append(saveCol, updateCol);\r\n    footer.appendChild(row);\r\n    card.append(header, tempBody, weatherBody, gifBody, footer);\r\n    main.appendChild(card);\r\n  }\r\n}\r\n\r\n//Class for making the card that will go in the saved area.\r\nclass SavedLocation {\r\n  constructor(id, city, temp, weatherIcon, weatherDesc, src, time) {\r\n    this.id = id;\r\n    this.city = city;\r\n    this.temp = temp;\r\n    this.weatherIcon = weatherIcon;\r\n    this.weatherDesc = weatherDesc;\r\n    this.src = src;\r\n    this.time = time;\r\n  }\r\n\r\n  //Creates the needed elements, assigns them values and appends them.\r\n  savedCreation() {\r\n    let tempcolor = \"\";\r\n    if (this.temp <= 32) {\r\n      tempcolor = \"border-info\";\r\n    } else if (this.temp <= 50) {\r\n      tempcolor = \"border-primary\";\r\n    } else if (this.temp <= 70) {\r\n      tempcolor = \"border-success\";\r\n    } else if (this.temp <= 80) {\r\n      tempcolor = \"border-warning\";\r\n    } else {\r\n      tempcolor = \"border-danger\";\r\n    }\r\n    let container = document.getElementById(\"savedCards\");\r\n    let main = document.createElement(\"div\");\r\n    main.classList.add(\"col\");\r\n    main.setAttribute(\"id\", this.id);\r\n    let card = document.createElement(\"div\");\r\n    card.classList.add(\"card\", tempcolor);\r\n    let header = document.createElement(\"div\");\r\n    header.classList.add(\"card-header\", tempcolor);\r\n    let footer = document.createElement(\"div\");\r\n    footer.classList.add(\"card-footer\", tempcolor);\r\n\r\n    let h3 = document.createElement(\"h3\");\r\n    let h2 = document.createElement(\"h2\");\r\n    let h5 = document.createElement(\"h5\");\r\n\r\n    let tempBody = document.createElement(\"div\");\r\n    tempBody.classList.add(\"card-body\");\r\n    let weatherBody = document.createElement(\"div\");\r\n    weatherBody.classList.add(\"card-body\");\r\n    let gifBody = document.createElement(\"div\");\r\n    gifBody.classList.add(\"gif\", \"card-body\");\r\n\r\n    let icon = document.createElement(\"img\");\r\n    let gif = document.createElement(\"img\");\r\n    gif.setAttribute(\"style\", \"width: 100%; height: 100%\");\r\n    gif.src = this.src;\r\n\r\n    let row = document.createElement(\"div\");\r\n    row.classList.add(\"row\");\r\n    let saveCol = document.createElement(\"div\");\r\n    saveCol.classList.add(\"col\", \"m-auto\");\r\n    let updateCol = document.createElement(\"div\");\r\n    updateCol.classList.add(\"col\", \"m-auto\");\r\n\r\n    let removeBtn = document.createElement(\"button\");\r\n    removeBtn.classList.add(\"btn\", \"btn-outline-secondary\");\r\n    removeBtn.setAttribute(\"id\", this.id);\r\n    removeBtn.innerHTML = \"Remove\";\r\n    removeBtn.addEventListener(\"click\", (event) => {\r\n      this.removeCard(event);\r\n    });\r\n\r\n    let upBtn = document.createElement(\"button\");\r\n    upBtn.classList.add(\"btn\", \"btn-outline-secondary\");\r\n    upBtn.setAttribute(\"id\", \"upBtn\");\r\n    upBtn.innerHTML = \"&#10227; Update\";\r\n\r\n    //Refetches the gif and weather data and reassigns them to the instance of the card and recreates the card.\r\n    upBtn.addEventListener(\"click\", (event) => {\r\n      let startTime = Date.now();\r\n      fetch(`${giphyURL}?api_key=${giphyKey}&s=weather+${this.weatherDesc}`, {\r\n        mode: \"cors\",\r\n      })\r\n        .then((result) => result.json())\r\n        .then((response) => {\r\n          this.src = response.data.images.original.url;\r\n        })\r\n        .catch((err) => {\r\n          this.src = \"#\";\r\n          console.error(err.message);\r\n        });\r\n      fetch(`${url}${query}${this.city}${apiKey}${units[0]}`, { mode: \"cors\" })\r\n        .then((result) => result.json())\r\n        .then((body) => {\r\n          this.city = body.name;\r\n          this.temp = body.main.temp.toFixed(0);\r\n          this.weatherIcon = body.weather[0].icon;\r\n          this.weatherDesc = body.weather[0].description;\r\n          this.time = new Date().toLocaleTimeString();\r\n\r\n          let container = document.getElementById(\"savedCards\");\r\n          container.innerHTML = \"\";\r\n          updateData();\r\n          loadCalc(startTime);\r\n        })\r\n        .catch((err) => {\r\n          console.error(err.message);\r\n          window.alert(\"Invalid city, please try again.\");\r\n        });\r\n    });\r\n\r\n    let label = document.createElement(\"label\");\r\n    label.setAttribute(\"for\", \"upBtn\");\r\n    label.textContent = \"Last Updated: \" + this.time;\r\n\r\n    //Append elements\r\n    h3.textContent = this.city;\r\n    header.appendChild(h3);\r\n    h2.textContent = this.temp + \"\\u00B0\" + units[1];\r\n    tempBody.appendChild(h2);\r\n    h5.textContent = this.weatherDesc;\r\n    icon.src = `http://openweathermap.org/img/wn/${this.weatherIcon}@2x.png`;\r\n    weatherBody.append(icon, h5);\r\n    gifBody.appendChild(gif);\r\n    saveCol.appendChild(removeBtn);\r\n    updateCol.append(label, upBtn);\r\n    row.append(saveCol, updateCol);\r\n    footer.appendChild(row);\r\n    card.append(header, tempBody, weatherBody, gifBody, footer);\r\n    main.appendChild(card);\r\n    container.appendChild(main);\r\n  }\r\n\r\n  removeCard(event) {\r\n    let removeId = event.target.id;\r\n    savedArr = savedArr.filter(function (ele) {\r\n      return ele.id !== parseInt(removeId);\r\n    });\r\n    let container = document.getElementById(\"savedCards\");\r\n    container.innerHTML = \"\";\r\n    updateData();\r\n  }\r\n}\r\n\r\nfunction updateData() {\r\n  savedArr.forEach((element) => {\r\n    element.savedCreation();\r\n  });\r\n}\r\n\r\nfunction loadCalc(startTime) {\r\n  let endTime = Date.now();\r\n  let diff = (endTime - startTime) / 1000;\r\n  let loading = document.getElementById(\"loading\");\r\n  loading.textContent = \"Content loaded in \" + diff.toFixed(3) + \" seconds.\";\r\n}\r\n\r\nasync function refetchSaved(city, units, id) {\r\n  await fetch(`${url}${query}${city}${apiKey}${units[0]}`, {\r\n    mode: \"cors\",\r\n  })\r\n    .then((result) => result.json())\r\n    .then((body) => {\r\n      let container = document.getElementById(\"savedCards\");\r\n      container.innerHTML = \"\";\r\n      let temp = body.main.temp.toFixed(0);\r\n      savedArr.forEach((ele) => {\r\n        if (ele.id == id) {\r\n          ele.temp = temp;\r\n        }\r\n      });\r\n      updateData();\r\n    })\r\n    .catch((err) => {\r\n      console.error(err.message);\r\n      window.alert(\"Invalid city, please try again.\");\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://weather-app-project/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;